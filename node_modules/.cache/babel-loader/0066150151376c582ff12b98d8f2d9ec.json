{"ast":null,"code":"var _jsxFileName = \"/Users/sandra/bakalarka/SmartGarden/smartgardenGitHub/frontend/src/views/PlantDetail.js\",\n    _s = $RefreshSig$();\n\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport PlantForm from \"../components/PlantForm\";\nimport ErrorComponent from \"../components/ErrorComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlantDetail(props) {\n  _s();\n\n  const axios = require(\"axios\");\n\n  const [plant, setPlant] = useState(null);\n  const params = useParams();\n  const [modalShow, setModalShow] = useState(false);\n  const [minTemperature, setMinTemperature] = useState(null);\n  const [maxTemperature, setMaxTemperature] = useState(null);\n  const [season, setSeason] = useState(\"\");\n  const [error, setError] = useState(false);\n  let history = useHistory();\n\n  const fetchPlant = () => {\n    axios({\n      method: \"get\",\n      url: process.env.REACT_APP_API_URL + \"/plants/\" + params.id,\n      withCredentials: true\n    }).then(res => {\n      if (res.status == 200) {\n        console.log(res.data);\n        setPlant(res.data);\n        setMaxTemperature(res.data.maxTemperature);\n        setMinTemperature(res.data.minTemperature);\n        setSeason(res.data.season);\n      } else throw Error(res.status);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const updatePlant = id => {\n    axios({\n      method: \"post\",\n      url: process.env.REACT_APP_API_URL + \"/plants/update\",\n      withCredentials: true,\n      data: {\n        id: id,\n        minTemperature: minTemperature,\n        maxTemperature: maxTemperature,\n        season: season\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        console.log(res);\n        fetchPlant();\n        history.push(\"/garden\");\n      } else throw Error(res.status);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const handleConfirmUpdate = id => {\n    updatePlant(id);\n    setModalShow(false);\n  };\n\n  const handleConfirmDelete = id => {\n    deletePlant(id);\n    setModalShow(false);\n  };\n\n  const deletePlant = id => {\n    console.log(id);\n    axios({\n      method: \"delete\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      withCredentials: true,\n      data: {},\n      url: process.env.REACT_APP_API_URL + \"/plants/\" + id\n    }).then(res => {\n      console.log(res);\n\n      if (res.status == 200) {\n        history.push(\"/garden\");\n      } else throw Error(res.status);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    fetchPlant();\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(ErrorComponent, {\n    onReset: () => setError(true),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PlantForm, {\n        plant: plant,\n        handleConfirmUpdate: handleConfirmUpdate,\n        handleConfirmDelete: handleConfirmDelete,\n        modalShow: modalShow,\n        setModalShow: setModalShow,\n        setMinTemperature: setMinTemperature,\n        setMaxTemperature: setMaxTemperature,\n        setSeason: setSeason\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlantDetail, \"ePQxUnuX+sSF3io0Ci9QdZT2X8k=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = PlantDetail;\nexport default PlantDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantDetail\");","map":{"version":3,"sources":["/Users/sandra/bakalarka/SmartGarden/smartgardenGitHub/frontend/src/views/PlantDetail.js"],"names":["useHistory","useParams","useState","useEffect","PlantForm","ErrorComponent","PlantDetail","props","axios","require","plant","setPlant","params","modalShow","setModalShow","minTemperature","setMinTemperature","maxTemperature","setMaxTemperature","season","setSeason","error","setError","history","fetchPlant","method","url","process","env","REACT_APP_API_URL","id","withCredentials","then","res","status","console","log","data","Error","catch","updatePlant","push","handleConfirmUpdate","handleConfirmDelete","deletePlant","headers"],"mappings":"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","sourcesContent":["import { useHistory, useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport PlantForm from \"../components/PlantForm\";\nimport ErrorComponent from \"../components/ErrorComponent\";\n\nfunction PlantDetail(props) {\n  const axios = require(\"axios\");\n  const [plant, setPlant] = useState(null);\n  const params = useParams();\n  const [modalShow, setModalShow] = useState(false);\n  const [minTemperature, setMinTemperature] = useState(null);\n  const [maxTemperature, setMaxTemperature] = useState(null);\n  const [season, setSeason] = useState(\"\");\n  const [error, setError] = useState(false);\n  let history = useHistory();\n\n  const fetchPlant = () => {\n    axios({\n      method: \"get\",\n      url: process.env.REACT_APP_API_URL + \"/plants/\" + params.id,\n      withCredentials: true,\n    })\n      .then((res) => {\n        if (res.status == 200) {\n          console.log(res.data);\n          setPlant(res.data);\n          setMaxTemperature(res.data.maxTemperature);\n          setMinTemperature(res.data.minTemperature);\n          setSeason(res.data.season);\n        } else throw Error(res.status);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  const updatePlant = (id) => {\n    axios({\n      method: \"post\",\n      url: process.env.REACT_APP_API_URL + \"/plants/update\",\n      withCredentials: true,\n      data: {\n        id: id,\n        minTemperature: minTemperature,\n        maxTemperature: maxTemperature,\n        season: season,\n      },\n    })\n      .then((res) => {\n        if (res.status == 200) {\n          console.log(res);\n          fetchPlant();\n          history.push(\"/garden\");\n        } else throw Error(res.status);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  const handleConfirmUpdate= (id) => {\n    updatePlant(id);\n    setModalShow(false);\n  };\n\n  const handleConfirmDelete= (id) => {\n    deletePlant(id);\n    setModalShow(false);\n  };\n\n  const deletePlant = (id) => {\n    console.log(id);\n    axios({\n      method: \"delete\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      withCredentials: true,\n      data: {},\n      url: process.env.REACT_APP_API_URL + \"/plants/\" + id,\n    })\n      .then((res) => {\n        console.log(res);\n        if (res.status == 200) {\n          history.push(\"/garden\");\n        } else throw Error(res.status);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n\n  useEffect(() => {\n    fetchPlant();\n  }, [error]);\n\n  return (\n    <ErrorComponent onReset={() => setError(true)}>\n      <div>\n        <PlantForm\n          plant={plant}\n          handleConfirmUpdate={handleConfirmUpdate}\n          handleConfirmDelete={handleConfirmDelete}\n          modalShow={modalShow}\n          setModalShow={setModalShow}\n          setMinTemperature={setMinTemperature}\n          setMaxTemperature={setMaxTemperature}\n          setSeason={setSeason}\n        />\n      </div>\n    </ErrorComponent>\n  );\n}\n\nexport default PlantDetail;\n"]},"metadata":{},"sourceType":"module"}