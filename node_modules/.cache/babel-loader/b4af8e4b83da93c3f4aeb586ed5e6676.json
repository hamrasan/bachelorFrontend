{"ast":null,"code":"var _jsxFileName = \"/Users/sandra/bakalarka/SmartGarden/smartgardenGitHub/frontend/src/views/MyHistory.js\",\n    _s = $RefreshSig$();\n\nimport ProfileStyle from \"../components/ProfileStyle\";\nimport contextValue from \"../appContext\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ErrorComponent from \"../components/ErrorComponent\";\nimport { useErrorHandler } from \"react-error-boundary\";\nimport { Container, Row, Form, Col, Button, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MyHistory() {\n  _s();\n\n  const axios = require(\"axios\");\n\n  const params = useParams();\n  const [history, setHistory] = useState([]);\n  const [error, setError] = useState(false);\n  const handleError = useErrorHandler();\n\n  const makeFormattedDate = oldDate => {\n    let date = new Date(oldDate);\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString();\n  };\n\n  const fetchHistory = () => {\n    axios({\n      method: \"get\",\n      withCredentials: true,\n      url: process.env.REACT_APP_API_URL + \"/sensors/history_all/\" + params.sensor + \"/\" + params.name\n    }).then(res => {\n      if (res.status == 200) {\n        setHistory(res.data);\n        console.log(res);\n      } else throw Error(res.status);\n    }).catch(error => {\n      handleError(error);\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    fetchHistory();\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(ErrorComponent, {\n    onReset: () => setError(true),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          className: \"list-group-flush\",\n          children: history.map(item => /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            className: \"d-flex flex-row justify-content-around\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: makeFormattedDate(item.date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: params.sensor == \"rain\" ? item.value == false ? \"Neprší\" : \"Prší\" : params.sensor == \"temperature\" ? item.value + \" °C\" : params.sensor == \"pressure\" ? item.value + \" hPa\" : item.value + \" %\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyHistory, \"FiAyqQx7QlUvqQ2N0pVkKylLzgs=\", false, function () {\n  return [useParams, useErrorHandler];\n});\n\n_c = MyHistory;\nexport default MyHistory;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyHistory\");","map":{"version":3,"sources":["/Users/sandra/bakalarka/SmartGarden/smartgardenGitHub/frontend/src/views/MyHistory.js"],"names":["ProfileStyle","contextValue","useState","useEffect","useParams","ErrorComponent","useErrorHandler","Container","Row","Form","Col","Button","ListGroup","ListGroupItem","MyHistory","axios","require","params","history","setHistory","error","setError","handleError","makeFormattedDate","oldDate","date","Date","toLocaleDateString","toLocaleTimeString","fetchHistory","method","withCredentials","url","process","env","REACT_APP_API_URL","sensor","name","then","res","status","data","console","log","Error","catch","map","item","value"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,SACEC,SADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,MALF,EAMEC,SANF,EAOEC,aAPF,QAQO,iBARP;;;AAUA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,QAAMC,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMoB,WAAW,GAAGhB,eAAe,EAAnC;;AAEA,QAAMiB,iBAAiB,GAAIC,OAAD,IAAa;AACrC,QAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,OAAT,CAAX;AACA,WAAOC,IAAI,CAACE,kBAAL,KAA4B,GAA5B,GAAkCF,IAAI,CAACG,kBAAL,EAAzC;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAG,MAAM;AACzBd,IAAAA,KAAK,CAAC;AACJe,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,eAAe,EAAE,IAFb;AAGJC,MAAAA,GAAG,EACDC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,uBAAhC,GACAlB,MAAM,CAACmB,MADP,GAEA,GAFA,GAGAnB,MAAM,CAACoB;AAPL,KAAD,CAAL,CASGC,IATH,CASSC,GAAD,IAAS;AACb,UAAKA,GAAG,CAACC,MAAJ,IAAc,GAAnB,EAAyB;AACvBrB,QAAAA,UAAU,CAACoB,GAAG,CAACE,IAAL,CAAV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACD,OAHD,MAGO,MAAMK,KAAK,CAACL,GAAG,CAACC,MAAL,CAAX;AACR,KAdH,EAeGK,KAfH,CAeUzB,KAAD,IAAW;AAChBE,MAAAA,WAAW,CAACF,KAAD,CAAX;AACAsB,MAAAA,OAAO,CAACtB,KAAR,CAAcA,KAAd;AACD,KAlBH;AAmBD,GApBD;;AAsBAjB,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACT,KAAD,CAFM,CAAT;AAIA,sBACE,QAAC,cAAD;AAAgB,IAAA,OAAO,EAAG,MAAMC,QAAQ,CAAC,IAAD,CAAxC;AAAA,2BACA;AAAA,6BACE,QAAC,SAAD;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,SAAS,EAAC,kBAArB;AAAA,oBACGH,OAAO,CAAC4B,GAAR,CAAaC,IAAD,iBACX,QAAC,aAAD;AAAe,YAAA,SAAS,EAAC,wCAAzB;AAAA,uBACG,GADH,eAEE;AAAA,wBAAOxB,iBAAiB,CAACwB,IAAI,CAACtB,IAAN;AAAxB;AAAA;AAAA;AAAA;AAAA,oBAFF,EAE8C,GAF9C,eAGE;AAAA,wBACGR,MAAM,CAACmB,MAAP,IAAiB,MAAjB,GACGW,IAAI,CAACC,KAAL,IAAc,KAAd,GACE,QADF,GAEE,MAHL,GAIG/B,MAAM,CAACmB,MAAP,IAAiB,aAAjB,GACAW,IAAI,CAACC,KAAL,GAAa,KADb,GAEA/B,MAAM,CAACmB,MAAP,IAAiB,UAAjB,GACAW,IAAI,CAACC,KAAL,GAAa,MADb,GAEAD,IAAI,CAACC,KAAL,GAAa;AATnB;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GAjEQlC,S;UAEQV,S,EAGKE,e;;;KALbQ,S;AAmET,eAAeA,SAAf","sourcesContent":["import ProfileStyle from \"../components/ProfileStyle\";\nimport contextValue from \"../appContext\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ErrorComponent from \"../components/ErrorComponent\";\nimport { useErrorHandler } from \"react-error-boundary\";\n\nimport {\n  Container,\n  Row,\n  Form,\n  Col,\n  Button,\n  ListGroup,\n  ListGroupItem,\n} from \"react-bootstrap\";\n\nfunction MyHistory() {\n  const axios = require(\"axios\");\n  const params = useParams();\n  const [history, setHistory] = useState([]);\n  const [error, setError] = useState(false);\n  const handleError = useErrorHandler();\n\n  const makeFormattedDate = (oldDate) => {\n    let date = new Date(oldDate);\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString();\n  };\n\n  const fetchHistory = () => {\n    axios({\n      method: \"get\",\n      withCredentials: true,\n      url:\n        process.env.REACT_APP_API_URL + \"/sensors/history_all/\" +\n        params.sensor +\n        \"/\" +\n        params.name,\n    })\n      .then((res) => {\n        if ((res.status == 200)) {\n          setHistory(res.data);\n          console.log(res);\n        } else throw Error(res.status);\n      })\n      .catch((error) => {\n        handleError(error);\n        console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    fetchHistory();\n  }, [error]);\n\n  return (\n    <ErrorComponent onReset={ () => setError(true)}>\n    <div>\n      <Container>\n        <ListGroup className=\"list-group-flush\">\n          {history.map((item) => (\n            <ListGroupItem className=\"d-flex flex-row justify-content-around\">\n              {\" \"}\n              <span>{makeFormattedDate(item.date)}</span>{\" \"}\n              <span>\n                {params.sensor == \"rain\"\n                  ? item.value == false\n                    ? \"Neprší\"\n                    : \"Prší\"\n                  : params.sensor == \"temperature\"\n                  ? item.value + \" °C\"\n                  : params.sensor == \"pressure\"\n                  ? item.value + \" hPa\"\n                  : item.value + \" %\"}\n              </span>\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n      </Container>\n    </div>\n    </ErrorComponent>\n  );\n}\n\nexport default MyHistory;\n"]},"metadata":{},"sourceType":"module"}